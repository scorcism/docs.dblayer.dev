[
  {
    "slug": "/account/account-details",
    "title": "Account Details",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/account/help",
    "title": "Help",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/account",
    "title": "Account",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/account/logs",
    "title": "Application Logs",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/account/team-management",
    "title": "Team Management",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/api",
    "title": "API",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/basic-setup/connection",
    "title": "Connection",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/basic-setup/endpoint",
    "title": "Endpoint",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/basic-setup",
    "title": "Introduction",
    "description": "This guide will walk you through the basics of setting up your first connection, organizing your endpoints in workspaces, and creating your first API.",
    "content": "# Getting Started with DBLayer\n\nWelcome to **DBLayer** – your toolkit for turning SQL queries into instant, secure REST APIs. In this guide, you’ll learn how to set up a database connection, organize your endpoints using workspaces, and publish your first custom API.\n\n***\n\n## 1. Create a Connection\n\nThe first step is to add a **Connection**. This is how DBLayer connects to your database.\n\n> Currently, we support only **PostgreSQL** databases.\n\nYour connection string should look like this:\n\n```bash\npostgres://username:password@host:port/database\n```\n\nIf you don’t have a PostgreSQL database yet, you can use one of these free hosting providers:\n\n***\n\n## 2. Set Up a Workspace\n\nA **Workspace** is like a project folder that helps you organize your API endpoints. Each workspace is linked to a single database connection.\n\n### Key Features:\n\n* Each workspace has a unique **slug**.\n* All endpoints inside a workspace share the same database connection.\n\n### Required Fields to Create a Workspace:\n\n| Field           | Description                                                          |\r\n|-----------------|----------------------------------------------------------------------|\r\n| **Name**        | A descriptive name for your workspace.                              |\r\n| **Connection**  | The database connection the workspace will use.                     |\r\n| **Origins**     | Allowed frontend origins for CORS. Use this to secure your API.     |\n\n***\n\n## 3. Create Endpoints\n\nOnce your workspace is ready, you can start adding **Endpoints**.\n\nEndpoints allow you to expose specific SQL queries as RESTful APIs. Each endpoint has its own path and can be configured to accept parameters and HTTP methods.\n\n### Key Features:\n\n* Each endpoint has a unique **slug** and its own API path.\n* You can choose which HTTP methods to allow (`GET`, `POST`).\n\n### Required Fields to Create an Endpoint:\n\n| Field              | Description                                                          |\r\n|--------------------|----------------------------------------------------------------------|\r\n| **Name**           | A readable name for your endpoint.                                  |\r\n| **Allowed Methods**| Select which HTTP methods are supported (`GET` or `POST`).           |\n\nOnce created, your endpoint is instantly accessible and can be customized or tested as needed.\n\n***\n\n## What’s Next?\n\n* Secure your endpoints with [Authentication](/docs/auth).\n* Add [Rate Limiting](/docs/rate-limiting) to prevent abuse.\n* Enable [Logging](/docs/logs) for monitoring and debugging.\n* Start building your own workspace and endpoints in just a few minutes!\n\n***\n\n> Need help? Join our [Discord Community](#) or explore the [Full Documentation](/docs).\n",
    "_searchMeta": {
      "cleanContent": "getting started with dblayer welcome to dblayer your toolkit for turning sql queries into instant secure rest apis in this guide you ll learn how to set up a database connection organize your endpoints using workspaces and publish your first custom api create a connection the first step is to add a connection this is how dblayer connects to your database currently we support only postgresql databases your connection string should look like this: if you don t have a postgresql database yet you can use one of these free hosting providers: set up a workspace a workspace is like a project folder that helps you organize your api endpoints each workspace is linked to a single database connection key features: each workspace has a unique slug all endpoints inside a workspace share the same database connection required fields to create a workspace: field description ----------------- ---------------------------------------------------------------------- name a descriptive name for your workspace connection the database connection the workspace will use origins allowed frontend origins for cors use this to secure your api create endpoints once your workspace is ready you can start adding endpoints endpoints allow you to expose specific sql queries as restful apis each endpoint has its own path and can be configured to accept parameters and http methods key features: each endpoint has a unique slug and its own api path you can choose which http methods to allow get post required fields to create an endpoint: field description -------------------- ---------------------------------------------------------------------- name a readable name for your endpoint allowed methods select which http methods are supported get or post once created your endpoint is instantly accessible and can be customized or tested as needed what s next secure your endpoints with authentication add rate limiting to prevent abuse enable logging for monitoring and debugging start building your own workspace and endpoints in just a few minutes need help join our discord community or explore the full documentation",
      "headings": [
        "1. Create a Connection",
        "2. Set Up a Workspace",
        "3. Create Endpoints",
        "What’s Next?"
      ],
      "keywords": [
        "introduction",
        "guide",
        "dblayer",
        "1. Create a Connection",
        "2. Set Up a Workspace",
        "3. Create Endpoints",
        "What’s Next?",
        "DBLayer",
        "## 1. Create a Connection\n\nThe first step is to add a",
        ". This is how DBLayer connects to your database.\n\n> Currently, we support only",
        "databases.\n\nYour connection string should look like this:\n\n```bash\npostgres://username:password@host:port/database\n```\n\nIf you don’t have a PostgreSQL database yet, you can use one of these free hosting providers:",
        "Workspace",
        "slug",
        "Name",
        "Connection",
        "Origins",
        "## 3. Create Endpoints\n\nOnce your workspace is ready, you can start adding",
        "Allowed Methods",
        "bash\npostgres://username:password@host:port/database",
        "If you don’t have a PostgreSQL database yet, you can use one of these free hosting providers:\n\n***\n\n## 2. Set Up a Workspace\n\nA **Workspace** is like a project folder that helps you organize your API endpoints. Each workspace is linked to a single database connection.\n\n### Key Features:\n\n* Each workspace has a unique **slug**.\n* All endpoints inside a workspace share the same database connection.\n\n### Required Fields to Create a Workspace:\n\n| Field           | Description                                                          |\r\n|-----------------|----------------------------------------------------------------------|\r\n| **Name**        | A descriptive name for your workspace.                              |\r\n| **Connection**  | The database connection the workspace will use.                     |\r\n| **Origins**     | Allowed frontend origins for CORS. Use this to secure your API.     |\n\n***\n\n## 3. Create Endpoints\n\nOnce your workspace is ready, you can start adding **Endpoints**.\n\nEndpoints allow you to expose specific SQL queries as RESTful APIs. Each endpoint has its own path and can be configured to accept parameters and HTTP methods.\n\n### Key Features:\n\n* Each endpoint has a unique **slug** and its own API path.\n* You can choose which HTTP methods to allow (",
        ",",
        ").\n\n### Required Fields to Create an Endpoint:\n\n| Field              | Description                                                          |\r\n|--------------------|----------------------------------------------------------------------|\r\n| **Name**           | A readable name for your endpoint.                                  |\r\n| **Allowed Methods**| Select which HTTP methods are supported (",
        "or"
      ]
    }
  },
  {
    "slug": "/basic-setup/workspace",
    "title": "Workspace",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/endpoint",
    "title": "Endpoint",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/endpoint/tabs/documentation",
    "title": "Documentation",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/endpoint/tabs",
    "title": "Tabs",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/endpoint/tabs/link",
    "title": "Link",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/endpoint/tabs/recipe",
    "title": "Recipe",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/endpoint/tabs/usage",
    "title": "Usage",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/features/api",
    "title": "API",
    "description": "This guide walks you through creating your first API with dblayer — from connecting your database to organizing endpoints in workspaces and publishing them.",
    "content": "## 📺 Video Guide\n\nPrefer learning visually? Watch our step-by-step video tutorial on setting up your first dblayer API (MOCK VIODE, REAL VIDEO IS IN PROGRESS):\n\n<iframe width=\"100%\" height=\"550\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" title=\"dblayer API Setup Guide\" frameborder=\"0\" allowfullscreen />\n\n***\n\n## 1. Create a Connection\n\nThe first step is to **add a database connection** — this is how dblayer links to your database.\n\n> Currently, dblayer supports only **PostgreSQL** databases.\n\nA typical PostgreSQL connection string looks like this:\n\n```bash\npostgres://username:password@host:port/database\n```\n\nIf you don’t already have a PostgreSQL database, here are some **free hosting providers** you can use:\n\n> *Note: These are not affiliate links — but if you know someone who knows someone who might sponsor us… we’re listening. 😊*\n\n***\n\n## 2. Set Up a Workspace\n\nA **Workspace** acts like a project folder for your API endpoints.\r\nEach workspace is linked to **a single database connection**.\n\n**Workspace Highlights:**\n\n* Unique **slug** for easy identification.\n* All endpoints inside share the same database connection.\n* Keeps your projects organized and manageable.\n\n***\n\n## 3. Create an Endpoint\n\nOnce your workspace is ready, you can create endpoints to expose SQL queries as REST APIs.\n\n**Endpoint Capabilities:**\n\n* Each endpoint has a **unique slug** and **custom API path**.\n* Supports HTTP methods like `GET` and `POST`.\n* Accepts query parameters for dynamic queries.\n\n**Required Fields:**\n\n| Field          | Description                                                  |\r\n| -------------- | ------------------------------------------------------------ |\r\n| **Name**       | A readable, descriptive name for your endpoint.              |\r\n| **API Method** | Choose supported HTTP methods (`GET` or `POST`).             |\r\n| **SQL Query**  | The SQL statement that will run when the endpoint is called. |\n\nOnce created, your endpoint is **instantly live** and can be tested immediately.\n\n***\n\n## 4. Edit & Publish an Endpoint\n\nAfter creating an endpoint, you’ll be redirected to the **Editor**.\r\nThe editor includes multiple subpages where you can:\n\n* Modify your SQL query.\n* Adjust parameters.\n* Test responses before publishing.\n\nWhen you’re ready, click the **Publish** button in the top-right corner to make your API live.\n\n***\n\n## 5. Next Steps\n\nWith your first API running, you can:\n\n* Build **dashboards** or **internal tools** using your API.\n\n***\n\n### Need help?\n\nJoin our [Discord Community](https://discord.gg/Chx5FGSQHp).\n",
    "_searchMeta": {
      "cleanContent": "video guide prefer learning visually watch our step-by-step video tutorial on setting up your first dblayer api mock viode real video is in progress : iframe width 100 height 550 src https: www youtube com embed dqw4w9wgxcq title dblayer api setup guide frameborder 0 allowfullscreen create a connection the first step is to add a database connection this is how dblayer links to your database currently dblayer supports only postgresql databases a typical postgresql connection string looks like this: if you don t already have a postgresql database here are some free hosting providers you can use: note: these are not affiliate links but if you know someone who knows someone who might sponsor us we re listening set up a workspace a workspace acts like a project folder for your api endpoints each workspace is linked to a single database connection workspace highlights: unique slug for easy identification all endpoints inside share the same database connection keeps your projects organized and manageable create an endpoint once your workspace is ready you can create endpoints to expose sql queries as rest apis endpoint capabilities: each endpoint has a unique slug and custom api path supports http methods like get and post accepts query parameters for dynamic queries required fields: field description -------------- ------------------------------------------------------------ name a readable descriptive name for your endpoint api method choose supported http methods get or post sql query the sql statement that will run when the endpoint is called once created your endpoint is instantly live and can be tested immediately edit publish an endpoint after creating an endpoint you ll be redirected to the editor the editor includes multiple subpages where you can: modify your sql query adjust parameters test responses before publishing when you re ready click the publish button in the top-right corner to make your api live next steps with your first api running you can: build dashboards or internal tools using your api need help join our discord community",
      "headings": [
        "📺 Video Guide",
        "1. Create a Connection",
        "2. Set Up a Workspace",
        "3. Create an Endpoint",
        "4. Edit & Publish an Endpoint",
        "5. Next Steps"
      ],
      "keywords": [
        "dblayer",
        "API setup",
        "PostgreSQL connection",
        "create endpoints",
        "workspace",
        "REST API",
        "API guide",
        "database API",
        "SQL API",
        "backend automation",
        "📺 Video Guide",
        "1. Create a Connection",
        "2. Set Up a Workspace",
        "3. Create an Endpoint",
        "4. Edit & Publish an Endpoint",
        "5. Next Steps",
        "## 1. Create a Connection\n\nThe first step is to",
        "— this is how dblayer links to your database.\n\n> Currently, dblayer supports only",
        "databases.\n\nA typical PostgreSQL connection string looks like this:\n\n```bash\npostgres://username:password@host:port/database\n```\n\nIf you don’t already have a PostgreSQL database, here are some",
        "## 2. Set Up a Workspace\n\nA",
        "acts like a project folder for your API endpoints.\r\nEach workspace is linked to",
        ".",
        "slug",
        "## 3. Create an Endpoint\n\nOnce your workspace is ready, you can create endpoints to expose SQL queries as REST APIs.",
        "unique slug",
        "custom API path",
        "Required Fields:",
        "Name",
        "API Method",
        "SQL Query",
        "instantly live",
        "## 4. Edit & Publish an Endpoint\n\nAfter creating an endpoint, you’ll be redirected to the",
        "Publish",
        "dashboards",
        "internal tools",
        "bash\npostgres://username:password@host:port/database",
        "If you don’t already have a PostgreSQL database, here are some **free hosting providers** you can use:\n\n> *Note: These are not affiliate links — but if you know someone who knows someone who might sponsor us… we’re listening. 😊*\n\n***\n\n## 2. Set Up a Workspace\n\nA **Workspace** acts like a project folder for your API endpoints.\r\nEach workspace is linked to **a single database connection**.\n\n**Workspace Highlights:**\n\n* Unique **slug** for easy identification.\n* All endpoints inside share the same database connection.\n* Keeps your projects organized and manageable.\n\n***\n\n## 3. Create an Endpoint\n\nOnce your workspace is ready, you can create endpoints to expose SQL queries as REST APIs.\n\n**Endpoint Capabilities:**\n\n* Each endpoint has a **unique slug** and **custom API path**.\n* Supports HTTP methods like",
        "and",
        ".\n* Accepts query parameters for dynamic queries.\n\n**Required Fields:**\n\n| Field          | Description                                                  |\r\n| -------------- | ------------------------------------------------------------ |\r\n| **Name**       | A readable, descriptive name for your endpoint.              |\r\n| **API Method** | Choose supported HTTP methods (",
        "or"
      ]
    }
  },
  {
    "slug": "/features/app",
    "title": "App",
    "description": "Learn how to create, customize, and publish applications in dblayer using drag-and-drop components.",
    "content": "## 📺 Video Guide\n\nPrefer a visual walkthrough? Watch our step-by-step tutorial on creating your first dblayer App (MOCK VIODE, REAL VIDEO IS IN PROGRESS)::\n\n<iframe width=\"100%\" height=\"550\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" title=\"dblayer App Setup Guide\" frameborder=\"0\" allowfullscreen />\n\n***\n\n## 1. Creating an App\n\nTo create your first app:\n\n1. Click the **Create App** button from the dashboard.\n2. Enter a **name** for your app.\n3. Click **Create** (or press **Enter**).\n4. You will be redirected to the **App Editor**.\n\n***\n\n## 2. Editing Your App\n\nThe **App Editor** is a drag-and-drop builder that allows you to design your app’s interface and connect it to your database.\n\n**Currently Supported Components:**\n\n| Component | Description |\r\n|-----------|-------------|\r\n| [**Table**](/docs/features/app/table) | Displays database query results in a tabular format. Supports sorting, filtering, and pagination. |\r\n| [**Button**](/docs/features/app/button) | Triggers actions, such as running a query or calling an endpoint. |\r\n| [**Text Input**](/docs/features/app/text-input) | Accepts user input that can be used in queries or filters. |\r\n| [**Label**](/docs/features/app/label) | Displays static or dynamic text in your app. |\n\n**Editing Features:**\n\n* Drag and drop components onto the canvas.\n* Resize and position components visually.\n* Bind component data to SQL queries or API endpoints.\n* Configure styles, labels, and default values.\n\n***\n\n## 3. Publishing the App\n\nOnce your app is ready, you can **publish** it:\n\n* **Private** — Only you (and workspace members) can access it.\n* **Public** — Anyone with the link can access it. *(Requires Pro access.)*\n\n**Publishing Steps:**\n\n1. Click the **Publish** button in the top-right corner of the App Editor.\n2. Choose your visibility settings (**Private** or **Public**).\n3. Confirm to make the app live.\n\n> After publishing, you can continue editing — updates are applied in real time once republished.\n\n***\n\n## 4. Best Practices\n\n* **Reuse queries** across multiple components for consistency.\n* **Test before publishing** to ensure all components behave as expected.\n* Use **Labels** to guide users through the app’s workflow.\n\n***\n\n## 5. Next Steps\n\nWith your first app published, you can:\n\n* Explore [API Endpoints](/docs/api) for dynamic data.\n* Build complete internal dashboards without writing extensive frontend code.\n\n***\n\n### Need help?\n\nJoin our [Discord Community](https://discord.gg/Chx5FGSQHp).\n",
    "_searchMeta": {
      "cleanContent": "video guide prefer a visual walkthrough watch our step-by-step tutorial on creating your first dblayer app mock viode real video is in progress :: iframe width 100 height 550 src https: www youtube com embed dqw4w9wgxcq title dblayer app setup guide frameborder 0 allowfullscreen creating an app to create your first app: click the create app button from the dashboard enter a name for your app click create or press enter you will be redirected to the app editor editing your app the app editor is a drag-and-drop builder that allows you to design your app s interface and connect it to your database currently supported components: component description ----------- ------------- table displays database query results in a tabular format supports sorting filtering and pagination button triggers actions such as running a query or calling an endpoint text input accepts user input that can be used in queries or filters label displays static or dynamic text in your app editing features: drag and drop components onto the canvas resize and position components visually bind component data to sql queries or api endpoints configure styles labels and default values publishing the app once your app is ready you can publish it: private only you and workspace members can access it public anyone with the link can access it requires pro access publishing steps: click the publish button in the top-right corner of the app editor choose your visibility settings private or public confirm to make the app live after publishing you can continue editing updates are applied in real time once republished best practices reuse queries across multiple components for consistency test before publishing to ensure all components behave as expected use labels to guide users through the app s workflow next steps with your first app published you can: explore api endpoints for dynamic data build complete internal dashboards without writing extensive frontend code need help join our discord community",
      "headings": [
        "📺 Video Guide",
        "1. Creating an App",
        "2. Editing Your App",
        "3. Publishing the App",
        "4. Best Practices",
        "5. Next Steps"
      ],
      "keywords": [
        "dblayer",
        "app builder",
        "low-code",
        "drag-and-drop",
        "internal tools",
        "dashboard",
        "publish app",
        "UI components",
        "workspace app",
        "application editor",
        "📺 Video Guide",
        "1. Creating an App",
        "2. Editing Your App",
        "3. Publishing the App",
        "4. Best Practices",
        "5. Next Steps",
        "## 1. Creating an App\n\nTo create your first app:\n\n1. Click the",
        "button from the dashboard.\n2. Enter a",
        "for your app.\n3. Click",
        "(or press",
        ").\n4. You will be redirected to the",
        ".",
        "App Editor",
        "Currently Supported Components:",
        "Table",
        "Button",
        "Text Input",
        "Label",
        "Editing Features:",
        "## 3. Publishing the App\n\nOnce your app is ready, you can",
        "Private",
        "Public",
        "Publishing Steps:",
        "Publish",
        "Reuse queries",
        "Test before publishing",
        "Labels"
      ]
    }
  },
  {
    "slug": "/features",
    "title": "Features",
    "description": "Discover how dblayer helps you instantly generate APIs and build internal tools without writing backend code.",
    "content": "# About dblayer\n\n**TL;DR:** dblayer instantly generates APIs and enables you to build internal tools like dashboards and reports, **no backend code required**, directly on top of your database.\n\nWe currently offer **two core features**:\n\n***\n\n## Platform Structure\n\ndblayer is divided into two parts: **API** and **App**.\\\nWhen you register, you can choose a custom subdomain, which becomes your App URL.\\\nFor example, if you choose `apple` as your subdomain, your custom App URL will be:\n\n```\napple.dblayer.dev\n```\n\nFor managing APIs, you can use our central dashboard at:\n\n```\ndashboard.dblayer.dev\n```\n\nCurrently, both the App and API are closely integrated. However, in the future, we plan to host all features on your custom subdomain so everything is unified under one URL—no extra navigation required.\n\n***\n\n## 1. API\n\nThe [Custom API](/docs/features/api) feature allows you to:\n\n* Instantly generate REST APIs from your PostgreSQL database with minimal setup.\n* Perform CRUD operations, filtering, sorting, and pagination out of the box.\n* Secure endpoints with authentication and authorization.\n* Improve performance through query caching.\n* Integrate effortlessly with frontend frameworks, mobile apps, and third-party services.\n\nWhether you’re building a public API or an internal service, dblayer significantly reduces backend development time.\n\n***\n\n## 2. APP\n\nThe [Custom App](/docs/features/app) feature enables you to:\n\n* Build interactive dashboards, admin panels, and reporting tools directly connected to your database.\n* Use a drag-and-drop interface with pre-built components (tables, buttons, and more coming soon).\n* Share your app securely with team members or external collaborators.\n* Publish publicly or privately in seconds without worrying about infrastructure.\n\nThis is ideal for creating internal tools, quick prototypes, or data visualization—**all without writing backend code**.\n\n***\n",
    "_searchMeta": {
      "cleanContent": "about dblayer tl dr: dblayer instantly generates apis and enables you to build internal tools like dashboards and reports no backend code required directly on top of your database we currently offer two core features: platform structure dblayer is divided into two parts: api and app when you register you can choose a custom subdomain which becomes your app url for example if you choose apple as your subdomain your custom app url will be: for managing apis you can use our central dashboard at: currently both the app and api are closely integrated however in the future we plan to host all features on your custom subdomain so everything is unified under one url no extra navigation required api the custom api feature allows you to: instantly generate rest apis from your postgresql database with minimal setup perform crud operations filtering sorting and pagination out of the box secure endpoints with authentication and authorization improve performance through query caching integrate effortlessly with frontend frameworks mobile apps and third-party services whether you re building a public api or an internal service dblayer significantly reduces backend development time app the custom app feature enables you to: build interactive dashboards admin panels and reporting tools directly connected to your database use a drag-and-drop interface with pre-built components tables buttons and more coming soon share your app securely with team members or external collaborators publish publicly or privately in seconds without worrying about infrastructure this is ideal for creating internal tools quick prototypes or data visualization all without writing backend code",
      "headings": [
        "Platform Structure",
        "1. API",
        "2. APP"
      ],
      "keywords": [
        "dblayer",
        "features",
        "API",
        "app builder",
        "no-code backend",
        "PostgreSQL API",
        "internal tools",
        "Platform Structure",
        "1. API",
        "2. APP",
        "TL;DR:",
        "no backend code required",
        "two core features",
        "## Platform Structure\n\ndblayer is divided into two parts:",
        "and",
        ".\\\nWhen you register, you can choose a custom subdomain, which becomes your App URL.\\\nFor example, if you choose `apple` as your subdomain, your custom App URL will be:\n\n```\napple.dblayer.dev\n```\n\nFor managing APIs, you can use our central dashboard at:\n\n```\ndashboard.dblayer.dev\n```\n\nCurrently, both the App and API are closely integrated. However, in the future, we plan to host all features on your custom subdomain so everything is unified under one URL—no extra navigation required.",
        "all without writing backend code",
        "apple",
        "apple.dblayer.dev",
        "For managing APIs, you can use our central dashboard at:",
        "dashboard.dblayer.dev"
      ]
    }
  },
  {
    "slug": "/guides/authentication",
    "title": "Authentication",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/guides",
    "title": "Guides",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/guides/logging",
    "title": "Logging",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/guides/rate-limit",
    "title": "Rate Limiting",
    "description": "",
    "content": "## Coming soon...\n",
    "_searchMeta": {
      "cleanContent": "coming soon",
      "headings": [
        "Coming soon..."
      ],
      "keywords": [
        "Coming soon..."
      ]
    }
  },
  {
    "slug": "/help/billing",
    "title": "Billing & Pricing",
    "description": "Explore dblayer's simple and transparent pricing plans. Choose from Starter, Professional, or Enterprise tiers to fit your needs, with options for monthly or yearly billing.",
    "content": "# Simple, Transparent Pricing\n\nSelect a plan that works for you.\\\n👉 [View all plans & pricing here](https://dblayer.dev/#pricing)\n\n***\n\n## Complete Your Payment\n\nChoose your preferred payment method below.\n\n### International Payment\n\nSecure payment via Wise for global users.\n\n**Important:** After payment, email us at [abhishek@dblayer.dev](mailto:abhishek@dblayer.dev) with your registered email to activate access within 12 hours.\n\n### Indian Payment (UPI)\n\nQuick payment via UPI for Indian users.\n\n**UPI ID:** `scor32k@ybl`\n\n**Next Steps:** Send your UPI transaction ID and registered email to [abhishek@dblayer.dev](mailto:abhishek@dblayer.dev).\n\n### Processing Time\n\nPlease allow up to 12 hours for account activation. We process payments manually to ensure security, and any delays will be compensated.\n",
    "_searchMeta": {
      "cleanContent": "simple transparent pricing select a plan that works for you view all plans pricing here complete your payment choose your preferred payment method below international payment secure payment via wise for global users important: after payment email us at abhishek dblayer dev with your registered email to activate access within 12 hours indian payment upi quick payment via upi for indian users upi id: scor32k ybl next steps: send your upi transaction id and registered email to abhishek dblayer dev processing time please allow up to 12 hours for account activation we process payments manually to ensure security and any delays will be compensated",
      "headings": [
        "Complete Your Payment"
      ],
      "keywords": [
        "pricing",
        "billing",
        "dblayer plans",
        "subscription",
        "payment",
        "Complete Your Payment",
        "## Complete Your Payment\n\nChoose your preferred payment method below.\n\n### International Payment\n\nSecure payment via Wise for global users.",
        "After payment, email us at [abhishek@dblayer.dev](mailto:abhishek@dblayer.dev) with your registered email to activate access within 12 hours.\n\n### Indian Payment (UPI)\n\nQuick payment via UPI for Indian users.",
        "`scor32k@ybl`",
        "scor32k@ybl"
      ]
    }
  },
  {
    "slug": "/help",
    "title": "Help Center",
    "description": "Find help with dblayer. Access our troubleshooting guides, view billing and pricing information, and contact our support team.",
    "content": "<div className=\"grid md:grid-cols-3 gap-8 mt-8\">\n  <Card title=\"Billing & Pricing\" href=\"/docs/help/billing\" description=\"Explore our pricing plans and manage your subscription.\" />\n</div>\n",
    "_searchMeta": {
      "cleanContent": "div classname grid md:grid-cols-3 gap-8 mt-8 card title billing pricing href docs help billing description explore our pricing plans and manage your subscription div",
      "headings": [],
      "keywords": [
        "help",
        "support",
        "billing",
        "troubleshooting",
        "documentation"
      ]
    }
  },
  {
    "slug": "/help/support",
    "title": "Support",
    "description": "Get help with dblayer by filling out our support form or contacting us directly via email for any issues or inquiries.",
    "content": "# Get Support\n\nIf you need assistance or want to report an issue, you have two options:\n\n1. **Fill out the support form:** For a structured way to report issues, please use our online form.\r\n   [Report an Issue](https://dblayer.dev/report)\n\n2. **Email us directly:** For general inquiries or if you prefer email, you can reach us at:\r\n   [abhishek@dblayer.dev](mailto:abhishek@dblayer.dev?cc=rohandas28@duck.com\\&subject=Hey%20Team%2C%20I%20need%20help!)\n\nWe'll get back to you as soon as possible.\n",
    "_searchMeta": {
      "cleanContent": "get support if you need assistance or want to report an issue you have two options: fill out the support form: for a structured way to report issues please use our online form report an issue email us directly: for general inquiries or if you prefer email you can reach us at: abhishek dblayer dev we ll get back to you as soon as possible",
      "headings": [],
      "keywords": [
        "support",
        "contact",
        "help",
        "report issue",
        "Fill out the support form:",
        "Email us directly:"
      ]
    }
  },
  {
    "slug": "/help/troubleshoot",
    "title": "Troubleshoot",
    "description": "Find solutions to common problems, connection issues, and errors when using dblayer. Learn how to debug your database connections, API endpoints, and applications.",
    "content": "# Troubleshooting Guide\n\nIf you run into issues while using dblayer, here are some common problems and solutions:\n\n### 1. Database Connection Issues\n\n**Problem:** Cannot connect to PostgreSQL database.\r\n**Possible Causes & Fixes:**\n\n* **Invalid connection string** — Make sure your string follows this format:\r\n  `postgres://username:password@host:port/database`\n\n* **Firewall/Network restrictions** — Ensure your database is publicly accessible or whitelist dblayer’s IP if required.\n\n* **Wrong credentials** — Double-check username, password, host, and database name.\n\n* **SSL required** — Some hosting providers (e.g., Render, Supabase) need `?sslmode=require` in the connection string.\n\n### 2. Endpoint Not Working\n\n**Problem:** Calling an API endpoint returns an error.\r\n**Possible Causes & Fixes:**\n\n* **SQL error** — Check if your SQL query runs correctly in your database client before using it in dblayer.\n\n* **Wrong method** — Ensure you’re calling the endpoint with the correct HTTP method (GET vs POST).\n\n* **Missing parameters** — If your query uses parameters, pass them properly in the request.\n\n* **Unauthorized access** — Confirm if authentication/authorization is enabled for that endpoint.\n\n### 3. Queries Returning No Data\n\n**Problem:** API works, but response is empty.\r\n**Possible Causes & Fixes:**\n\n* **Empty table** — Verify your database actually has data.\n\n* **Filtering issue** — Check if your `WHERE` clause or query parameters are too restrictive.\n\n* **Schema mismatch** — Ensure you’re querying the correct schema (e.g., `public.users` vs `users`).\n\n### 4. App Editor Issues\n\n**Problem:** App is not updating or components aren’t showing data.\r\n**Possible Causes & Fixes:**\n\n* **Query not bound** — Make sure your component is linked to a valid SQL query or API endpoint.\n\n* **Wrong data mapping** — Double-check that your table/label/input points to the correct field in the query response.\n\n* **Unpublished changes** — Remember to click **Publish** after editing.\n\n### 5. Publishing Problems\n\n**Problem:** Endpoint/App not accessible after publishing.\r\n**Possible Causes & Fixes:**\n\n* **Private by default** — Apps are private unless you explicitly set them to public.\n\n* **Wrong URL** — Verify your custom subdomain (e.g., `apple.dblayer.dev`).\n\n* **Propagation delay** — Wait a few seconds and refresh after publishing.\n\n### 6. Performance & Caching\n\n**Problem:** API feels slow.\r\n**Fixes:**\n\n* Enable query caching for frequent queries.\n* Optimize your SQL queries (indexes, limit results).\n* Use pagination for large datasets.\n\n### 7. General Debugging Tips\n\n* Test your SQL queries directly in a PostgreSQL client (psql, Supabase, etc.) before using them in dblayer.\n* Check console/network logs in your browser when testing endpoints.\n* If all else fails, restart your workspace connection from the dashboard.\n\n**Still stuck?** Join our [Discord Community](https://discord.gg/UUEkmUGnyy) for real-time support.\n",
    "_searchMeta": {
      "cleanContent": "troubleshooting guide if you run into issues while using dblayer here are some common problems and solutions: database connection issues problem: cannot connect to postgresql database possible causes fixes: invalid connection string make sure your string follows this format: postgres: username:password host:port database firewall network restrictions ensure your database is publicly accessible or whitelist dblayer s ip if required wrong credentials double-check username password host and database name ssl required some hosting providers e g render supabase need sslmode require in the connection string endpoint not working problem: calling an api endpoint returns an error possible causes fixes: sql error check if your sql query runs correctly in your database client before using it in dblayer wrong method ensure you re calling the endpoint with the correct http method get vs post missing parameters if your query uses parameters pass them properly in the request unauthorized access confirm if authentication authorization is enabled for that endpoint queries returning no data problem: api works but response is empty possible causes fixes: empty table verify your database actually has data filtering issue check if your where clause or query parameters are too restrictive schema mismatch ensure you re querying the correct schema e g public users vs users app editor issues problem: app is not updating or components aren t showing data possible causes fixes: query not bound make sure your component is linked to a valid sql query or api endpoint wrong data mapping double-check that your table label input points to the correct field in the query response unpublished changes remember to click publish after editing publishing problems problem: endpoint app not accessible after publishing possible causes fixes: private by default apps are private unless you explicitly set them to public wrong url verify your custom subdomain e g apple dblayer dev propagation delay wait a few seconds and refresh after publishing performance caching problem: api feels slow fixes: enable query caching for frequent queries optimize your sql queries indexes limit results use pagination for large datasets general debugging tips test your sql queries directly in a postgresql client psql supabase etc before using them in dblayer check console network logs in your browser when testing endpoints if all else fails restart your workspace connection from the dashboard still stuck join our discord community for real-time support",
      "headings": [],
      "keywords": [
        "troubleshoot",
        "dblayer issues",
        "database connection error",
        "api endpoint not working",
        "debugging guide",
        "common errors",
        "Problem:",
        "Possible Causes & Fixes:",
        "Invalid connection string",
        "Firewall/Network restrictions",
        "Wrong credentials",
        "SSL required",
        "SQL error",
        "Wrong method",
        "Missing parameters",
        "Unauthorized access",
        "Empty table",
        "Filtering issue",
        "Schema mismatch",
        "Query not bound",
        "Wrong data mapping",
        "Unpublished changes",
        "Publish",
        "Private by default",
        "Wrong URL",
        "Propagation delay",
        "Fixes:",
        "Still stuck?",
        "postgres://username:password@host:port/database",
        "?sslmode=require",
        "WHERE",
        "public.users",
        "users",
        "apple.dblayer.dev"
      ]
    }
  }
]